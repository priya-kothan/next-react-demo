{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Priya\\\\doc_Priya\\\\Projects\\\\NextJs\\\\transport_provider\\\\pages\\\\[providerId]\\\\index.js\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport { Fragment } from 'react';\nimport Head from 'next/head';\nimport TransportProviderDetail from '../../components/transports/TransportProviderDetail';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.TransportData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransportProviderDetail, {\n      data: props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://priya:8WkZP0UN2RgWgGNW@cluster0.cgwklk9.mongodb.net/transportprovider?retryWrites=true&w=majority');\n  const db = client.db();\n  const transportproviderCollection = db.collection('transportprovider');\n  const transports = await transportproviderCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: 'blocking',\n    paths: transports.map(trans => ({\n      params: {\n        providerId: trans._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n  const providerId = context.params.providerId;\n  const client = await MongoClient.connect('mongodb+srv://priya:8WkZP0UN2RgWgGNW@cluster0.cgwklk9.mongodb.net/transportprovider?retryWrites=true&w=majority');\n  const db = client.db();\n  const transportproviderCollection = db.collection('transportprovider');\n  const selectedProvider = await transportproviderCollection.findOne({\n    _id: ObjectId(providerId)\n  });\n  client.close();\n  return {\n    props: {\n      TransportData: {\n        id: selectedProvider._id.toString(),\n        owner_name: selectedProvider.owner_name,\n        vehicle_no: selectedProvider.vehicle_no,\n        driver_name: selectedProvider.driver_name,\n        phone_no: selectedProvider.phone_no,\n        licence_no: selectedProvider.licence_no,\n        service_type: selectedProvider.service_type,\n        address: selectedProvider.address,\n        description: selectedProvider.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Priya/doc_Priya/Projects/NextJs/transport_provider/pages/[providerId]/index.js"],"names":["MongoClient","ObjectId","Fragment","Head","TransportProviderDetail","MeetupDetails","props","TransportData","description","getStaticPaths","client","connect","db","transportproviderCollection","collection","transports","find","_id","toArray","close","fallback","paths","map","trans","params","providerId","toString","getStaticProps","context","selectedProvider","findOne","id","owner_name","vehicle_no","driver_name","phone_no","licence_no","service_type","address"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAOC,uBAAP,MAAoC,qDAApC;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,6BAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAEA,KAAK,CAACC,aAAN,CAAoBC;AAAtD;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,uBAAD;AACC,MAAA,IAAI,EAAEF;AADP;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;AAED,OAAO,eAAeG,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,iHADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,2BAA2B,GAAGD,EAAE,CAACE,UAAH,CAAc,mBAAd,CAApC;AAEA,QAAMC,UAAU,GAAG,MAAMF,2BAA2B,CAACG,IAA5B,CAAiC,EAAjC,EAAqC;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAArC,EAAiDC,OAAjD,EAAzB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,UADL;AAELC,IAAAA,KAAK,EAAEN,UAAU,CAACO,GAAX,CAAgBC,KAAD,KAAY;AAChCC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,UAAU,EAAEF,KAAK,CAACN,GAAN,CAAUS,QAAV;AAAd;AADwB,KAAZ,CAAf;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AAEA,QAAMH,UAAU,GAAGG,OAAO,CAACJ,MAAR,CAAeC,UAAlC;AAEA,QAAMf,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,iHADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,2BAA2B,GAAGD,EAAE,CAACE,UAAH,CAAc,mBAAd,CAApC;AAEA,QAAMe,gBAAgB,GAAG,MAAMhB,2BAA2B,CAACiB,OAA5B,CAAoC;AACjEb,IAAAA,GAAG,EAAEhB,QAAQ,CAACwB,UAAD;AADoD,GAApC,CAA/B;AAIAf,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLb,IAAAA,KAAK,EAAE;AACLC,MAAAA,aAAa,EAAE;AACXwB,QAAAA,EAAE,EAAEF,gBAAgB,CAACZ,GAAjB,CAAqBS,QAArB,EADO;AAEXM,QAAAA,UAAU,EAAEH,gBAAgB,CAACG,UAFlB;AAGXC,QAAAA,UAAU,EAAEJ,gBAAgB,CAACI,UAHlB;AAIXC,QAAAA,WAAW,EAAEL,gBAAgB,CAACK,WAJnB;AAKXC,QAAAA,QAAQ,EAAEN,gBAAgB,CAACM,QALhB;AAMXC,QAAAA,UAAU,EAAEP,gBAAgB,CAACO,UANlB;AAOXC,QAAAA,YAAY,EAAER,gBAAgB,CAACQ,YAPpB;AAQXC,QAAAA,OAAO,EAAET,gBAAgB,CAACS,OARf;AASX9B,QAAAA,WAAW,EAAEqB,gBAAgB,CAACrB;AATnB;AADV;AADF,GAAP;AAeD;AAED,eAAeH,aAAf","sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\nimport { Fragment } from 'react';\nimport Head from 'next/head';\n\nimport TransportProviderDetail from '../../components/transports/TransportProviderDetail';\n\nfunction MeetupDetails(props) {\n  return (\n    <Fragment>\n      <Head>\n        {/* <title>{props.meetupData.title}</title> */}\n        <meta name='description' content={props.TransportData.description} />\n      </Head>\n      <TransportProviderDetail\n       data={props}\n      />\n    </Fragment>\n  );\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    'mongodb+srv://priya:8WkZP0UN2RgWgGNW@cluster0.cgwklk9.mongodb.net/transportprovider?retryWrites=true&w=majority'\n  );\n  const db = client.db();\n\n  const transportproviderCollection = db.collection('transportprovider');\n\n  const transports = await transportproviderCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    fallback: 'blocking',\n    paths: transports.map((trans) => ({\n      params: { providerId: trans._id.toString() },\n    })),\n  };\n}\n\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n\n  const providerId = context.params.providerId;\n\n  const client = await MongoClient.connect(\n    'mongodb+srv://priya:8WkZP0UN2RgWgGNW@cluster0.cgwklk9.mongodb.net/transportprovider?retryWrites=true&w=majority'\n  );\n  const db = client.db();\n\n  const transportproviderCollection = db.collection('transportprovider');\n\n  const selectedProvider = await transportproviderCollection.findOne({\n    _id: ObjectId(providerId),\n  });\n\n  client.close();\n\n  return {\n    props: {\n      TransportData: {\n          id: selectedProvider._id.toString(),\n          owner_name: selectedProvider.owner_name,\n          vehicle_no: selectedProvider.vehicle_no,\n          driver_name: selectedProvider.driver_name,\n          phone_no: selectedProvider.phone_no,\n          licence_no: selectedProvider.licence_no,\n          service_type: selectedProvider.service_type,\n          address: selectedProvider.address,\n          description: selectedProvider.description,\n      },\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}